// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Telemetry.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Library.Inputs.Contracts {

  /// <summary>Holder for reflection information generated from Telemetry.proto</summary>
  public static partial class TelemetryReflection {

    #region Descriptor
    /// <summary>File descriptor for Telemetry.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static TelemetryReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg9UZWxlbWV0cnkucHJvdG8SCWNvbnRyYWN0cxoLRXZlbnQucHJvdG8aDU1l",
            "c3NhZ2UucHJvdG8aDE1ldHJpYy5wcm90bxoPRXhjZXB0aW9uLnByb3RvGhBE",
            "ZXBlbmRlbmN5LnByb3RvGhJBdmFpbGFiaWxpdHkucHJvdG8aDlBhZ2VWaWV3",
            "LnByb3RvGg1SZXF1ZXN0LnByb3RvIrUECglUZWxlbWV0cnkSCwoDdmVyGAEg",
            "ASgFEhQKDGRhdGFUeXBlTmFtZRgCIAEoCRIQCghkYXRlVGltZRgDIAEoCRIU",
            "CgxzYW1wbGluZ1JhdGUYBCABKAESFgoOc2VxdWVuY2VOdW1iZXIYBSABKAkS",
            "GgoSaW5zdHJ1bWVudGF0aW9uS2V5GAYgASgJEiwKBHRhZ3MYByADKAsyHi5j",
            "b250cmFjdHMuVGVsZW1ldHJ5LlRhZ3NFbnRyeRIhCgVldmVudBgIIAEoCzIQ",
            "LmNvbnRyYWN0cy5FdmVudEgAEiUKB21lc3NhZ2UYCSABKAsyEi5jb250cmFj",
            "dHMuTWVzc2FnZUgAEiMKBm1ldHJpYxgKIAEoCzIRLmNvbnRyYWN0cy5NZXRy",
            "aWNIABIpCglleGNlcHRpb24YCyABKAsyFC5jb250cmFjdHMuRXhjZXB0aW9u",
            "SAASKwoKZGVwZW5kZW5jeRgMIAEoCzIVLmNvbnRyYWN0cy5EZXBlbmRlbmN5",
            "SAASLwoMYXZhaWxhYmlsaXR5GA0gASgLMhcuY29udHJhY3RzLkF2YWlsYWJp",
            "bGl0eUgAEicKCHBhZ2VWaWV3GA4gASgLMhMuY29udHJhY3RzLlBhZ2VWaWV3",
            "SAASJQoHcmVxdWVzdBgPIAEoCzISLmNvbnRyYWN0cy5SZXF1ZXN0SAAaKwoJ",
            "VGFnc0VudHJ5EgsKA2tleRgBIAEoCRINCgV2YWx1ZRgCIAEoCToCOAFCBgoE",
            "ZGF0YUIbqgIYTGlicmFyeS5JbnB1dHMuQ29udHJhY3RzYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Library.Inputs.Contracts.EventReflection.Descriptor, global::Library.Inputs.Contracts.MessageReflection.Descriptor, global::Library.Inputs.Contracts.MetricReflection.Descriptor, global::Library.Inputs.Contracts.ExceptionReflection.Descriptor, global::Library.Inputs.Contracts.DependencyReflection.Descriptor, global::Library.Inputs.Contracts.AvailabilityReflection.Descriptor, global::Library.Inputs.Contracts.PageViewReflection.Descriptor, global::Library.Inputs.Contracts.RequestReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Library.Inputs.Contracts.Telemetry), global::Library.Inputs.Contracts.Telemetry.Parser, new[]{ "Ver", "DataTypeName", "DateTime", "SamplingRate", "SequenceNumber", "InstrumentationKey", "Tags", "Event", "Message", "Metric", "Exception", "Dependency", "Availability", "PageView", "Request" }, new[]{ "Data" }, null, new pbr::GeneratedClrTypeInfo[] { null, })
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class Telemetry : pb::IMessage<Telemetry> {
    private static readonly pb::MessageParser<Telemetry> _parser = new pb::MessageParser<Telemetry>(() => new Telemetry());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Telemetry> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Library.Inputs.Contracts.TelemetryReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Telemetry() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Telemetry(Telemetry other) : this() {
      ver_ = other.ver_;
      dataTypeName_ = other.dataTypeName_;
      dateTime_ = other.dateTime_;
      samplingRate_ = other.samplingRate_;
      sequenceNumber_ = other.sequenceNumber_;
      instrumentationKey_ = other.instrumentationKey_;
      tags_ = other.tags_.Clone();
      switch (other.DataCase) {
        case DataOneofCase.Event:
          Event = other.Event.Clone();
          break;
        case DataOneofCase.Message:
          Message = other.Message.Clone();
          break;
        case DataOneofCase.Metric:
          Metric = other.Metric.Clone();
          break;
        case DataOneofCase.Exception:
          Exception = other.Exception.Clone();
          break;
        case DataOneofCase.Dependency:
          Dependency = other.Dependency.Clone();
          break;
        case DataOneofCase.Availability:
          Availability = other.Availability.Clone();
          break;
        case DataOneofCase.PageView:
          PageView = other.PageView.Clone();
          break;
        case DataOneofCase.Request:
          Request = other.Request.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Telemetry Clone() {
      return new Telemetry(this);
    }

    /// <summary>Field number for the "ver" field.</summary>
    public const int VerFieldNumber = 1;
    private int ver_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Ver {
      get { return ver_; }
      set {
        ver_ = value;
      }
    }

    /// <summary>Field number for the "dataTypeName" field.</summary>
    public const int DataTypeNameFieldNumber = 2;
    private string dataTypeName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DataTypeName {
      get { return dataTypeName_; }
      set {
        dataTypeName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "dateTime" field.</summary>
    public const int DateTimeFieldNumber = 3;
    private string dateTime_ = "";
    /// <summary>
    ///[Description("Event date time when telemetry item was created. This is the wall clock time on the client when the event was generated. There is no guarantee that the client's time is accurate. This field must be formatted in UTC ISO 8601 format, with a trailing 'Z' character, as described publicly on https://en.wikipedia.org/wiki/ISO_8601#UTC. Note: the number of decimal seconds digits provided are variable (and unspecified). Consumers should handle this, i.e. managed code consumers should not use format 'O' for parsing as it specifies a fixed length. Example: 2009-06-15T13:45:30.0000000Z.")]
    ///[Name("DateTime")]
    ///[CSType("DateTimeOffset")]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DateTime {
      get { return dateTime_; }
      set {
        dateTime_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "samplingRate" field.</summary>
    public const int SamplingRateFieldNumber = 4;
    private double samplingRate_;
    /// <summary>
    ///default must be assumed 100
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double SamplingRate {
      get { return samplingRate_; }
      set {
        samplingRate_ = value;
      }
    }

    /// <summary>Field number for the "sequenceNumber" field.</summary>
    public const int SequenceNumberFieldNumber = 5;
    private string sequenceNumber_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SequenceNumber {
      get { return sequenceNumber_; }
      set {
        sequenceNumber_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "instrumentationKey" field.</summary>
    public const int InstrumentationKeyFieldNumber = 6;
    private string instrumentationKey_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string InstrumentationKey {
      get { return instrumentationKey_; }
      set {
        instrumentationKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "tags" field.</summary>
    public const int TagsFieldNumber = 7;
    private static readonly pbc::MapField<string, string>.Codec _map_tags_codec
        = new pbc::MapField<string, string>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForString(18), 58);
    private readonly pbc::MapField<string, string> tags_ = new pbc::MapField<string, string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, string> Tags {
      get { return tags_; }
    }

    /// <summary>Field number for the "event" field.</summary>
    public const int EventFieldNumber = 8;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Library.Inputs.Contracts.Event Event {
      get { return dataCase_ == DataOneofCase.Event ? (global::Library.Inputs.Contracts.Event) data_ : null; }
      set {
        data_ = value;
        dataCase_ = value == null ? DataOneofCase.None : DataOneofCase.Event;
      }
    }

    /// <summary>Field number for the "message" field.</summary>
    public const int MessageFieldNumber = 9;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Library.Inputs.Contracts.Message Message {
      get { return dataCase_ == DataOneofCase.Message ? (global::Library.Inputs.Contracts.Message) data_ : null; }
      set {
        data_ = value;
        dataCase_ = value == null ? DataOneofCase.None : DataOneofCase.Message;
      }
    }

    /// <summary>Field number for the "metric" field.</summary>
    public const int MetricFieldNumber = 10;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Library.Inputs.Contracts.Metric Metric {
      get { return dataCase_ == DataOneofCase.Metric ? (global::Library.Inputs.Contracts.Metric) data_ : null; }
      set {
        data_ = value;
        dataCase_ = value == null ? DataOneofCase.None : DataOneofCase.Metric;
      }
    }

    /// <summary>Field number for the "exception" field.</summary>
    public const int ExceptionFieldNumber = 11;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Library.Inputs.Contracts.Exception Exception {
      get { return dataCase_ == DataOneofCase.Exception ? (global::Library.Inputs.Contracts.Exception) data_ : null; }
      set {
        data_ = value;
        dataCase_ = value == null ? DataOneofCase.None : DataOneofCase.Exception;
      }
    }

    /// <summary>Field number for the "dependency" field.</summary>
    public const int DependencyFieldNumber = 12;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Library.Inputs.Contracts.Dependency Dependency {
      get { return dataCase_ == DataOneofCase.Dependency ? (global::Library.Inputs.Contracts.Dependency) data_ : null; }
      set {
        data_ = value;
        dataCase_ = value == null ? DataOneofCase.None : DataOneofCase.Dependency;
      }
    }

    /// <summary>Field number for the "availability" field.</summary>
    public const int AvailabilityFieldNumber = 13;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Library.Inputs.Contracts.Availability Availability {
      get { return dataCase_ == DataOneofCase.Availability ? (global::Library.Inputs.Contracts.Availability) data_ : null; }
      set {
        data_ = value;
        dataCase_ = value == null ? DataOneofCase.None : DataOneofCase.Availability;
      }
    }

    /// <summary>Field number for the "pageView" field.</summary>
    public const int PageViewFieldNumber = 14;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Library.Inputs.Contracts.PageView PageView {
      get { return dataCase_ == DataOneofCase.PageView ? (global::Library.Inputs.Contracts.PageView) data_ : null; }
      set {
        data_ = value;
        dataCase_ = value == null ? DataOneofCase.None : DataOneofCase.PageView;
      }
    }

    /// <summary>Field number for the "request" field.</summary>
    public const int RequestFieldNumber = 15;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Library.Inputs.Contracts.Request Request {
      get { return dataCase_ == DataOneofCase.Request ? (global::Library.Inputs.Contracts.Request) data_ : null; }
      set {
        data_ = value;
        dataCase_ = value == null ? DataOneofCase.None : DataOneofCase.Request;
      }
    }

    private object data_;
    /// <summary>Enum of possible cases for the "data" oneof.</summary>
    public enum DataOneofCase {
      None = 0,
      Event = 8,
      Message = 9,
      Metric = 10,
      Exception = 11,
      Dependency = 12,
      Availability = 13,
      PageView = 14,
      Request = 15,
    }
    private DataOneofCase dataCase_ = DataOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DataOneofCase DataCase {
      get { return dataCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearData() {
      dataCase_ = DataOneofCase.None;
      data_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Telemetry);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Telemetry other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Ver != other.Ver) return false;
      if (DataTypeName != other.DataTypeName) return false;
      if (DateTime != other.DateTime) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(SamplingRate, other.SamplingRate)) return false;
      if (SequenceNumber != other.SequenceNumber) return false;
      if (InstrumentationKey != other.InstrumentationKey) return false;
      if (!Tags.Equals(other.Tags)) return false;
      if (!object.Equals(Event, other.Event)) return false;
      if (!object.Equals(Message, other.Message)) return false;
      if (!object.Equals(Metric, other.Metric)) return false;
      if (!object.Equals(Exception, other.Exception)) return false;
      if (!object.Equals(Dependency, other.Dependency)) return false;
      if (!object.Equals(Availability, other.Availability)) return false;
      if (!object.Equals(PageView, other.PageView)) return false;
      if (!object.Equals(Request, other.Request)) return false;
      if (DataCase != other.DataCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Ver != 0) hash ^= Ver.GetHashCode();
      if (DataTypeName.Length != 0) hash ^= DataTypeName.GetHashCode();
      if (DateTime.Length != 0) hash ^= DateTime.GetHashCode();
      if (SamplingRate != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(SamplingRate);
      if (SequenceNumber.Length != 0) hash ^= SequenceNumber.GetHashCode();
      if (InstrumentationKey.Length != 0) hash ^= InstrumentationKey.GetHashCode();
      hash ^= Tags.GetHashCode();
      if (dataCase_ == DataOneofCase.Event) hash ^= Event.GetHashCode();
      if (dataCase_ == DataOneofCase.Message) hash ^= Message.GetHashCode();
      if (dataCase_ == DataOneofCase.Metric) hash ^= Metric.GetHashCode();
      if (dataCase_ == DataOneofCase.Exception) hash ^= Exception.GetHashCode();
      if (dataCase_ == DataOneofCase.Dependency) hash ^= Dependency.GetHashCode();
      if (dataCase_ == DataOneofCase.Availability) hash ^= Availability.GetHashCode();
      if (dataCase_ == DataOneofCase.PageView) hash ^= PageView.GetHashCode();
      if (dataCase_ == DataOneofCase.Request) hash ^= Request.GetHashCode();
      hash ^= (int) dataCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Ver != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Ver);
      }
      if (DataTypeName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(DataTypeName);
      }
      if (DateTime.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(DateTime);
      }
      if (SamplingRate != 0D) {
        output.WriteRawTag(33);
        output.WriteDouble(SamplingRate);
      }
      if (SequenceNumber.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(SequenceNumber);
      }
      if (InstrumentationKey.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(InstrumentationKey);
      }
      tags_.WriteTo(output, _map_tags_codec);
      if (dataCase_ == DataOneofCase.Event) {
        output.WriteRawTag(66);
        output.WriteMessage(Event);
      }
      if (dataCase_ == DataOneofCase.Message) {
        output.WriteRawTag(74);
        output.WriteMessage(Message);
      }
      if (dataCase_ == DataOneofCase.Metric) {
        output.WriteRawTag(82);
        output.WriteMessage(Metric);
      }
      if (dataCase_ == DataOneofCase.Exception) {
        output.WriteRawTag(90);
        output.WriteMessage(Exception);
      }
      if (dataCase_ == DataOneofCase.Dependency) {
        output.WriteRawTag(98);
        output.WriteMessage(Dependency);
      }
      if (dataCase_ == DataOneofCase.Availability) {
        output.WriteRawTag(106);
        output.WriteMessage(Availability);
      }
      if (dataCase_ == DataOneofCase.PageView) {
        output.WriteRawTag(114);
        output.WriteMessage(PageView);
      }
      if (dataCase_ == DataOneofCase.Request) {
        output.WriteRawTag(122);
        output.WriteMessage(Request);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Ver != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Ver);
      }
      if (DataTypeName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DataTypeName);
      }
      if (DateTime.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DateTime);
      }
      if (SamplingRate != 0D) {
        size += 1 + 8;
      }
      if (SequenceNumber.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SequenceNumber);
      }
      if (InstrumentationKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(InstrumentationKey);
      }
      size += tags_.CalculateSize(_map_tags_codec);
      if (dataCase_ == DataOneofCase.Event) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Event);
      }
      if (dataCase_ == DataOneofCase.Message) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Message);
      }
      if (dataCase_ == DataOneofCase.Metric) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Metric);
      }
      if (dataCase_ == DataOneofCase.Exception) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Exception);
      }
      if (dataCase_ == DataOneofCase.Dependency) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Dependency);
      }
      if (dataCase_ == DataOneofCase.Availability) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Availability);
      }
      if (dataCase_ == DataOneofCase.PageView) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PageView);
      }
      if (dataCase_ == DataOneofCase.Request) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Request);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Telemetry other) {
      if (other == null) {
        return;
      }
      if (other.Ver != 0) {
        Ver = other.Ver;
      }
      if (other.DataTypeName.Length != 0) {
        DataTypeName = other.DataTypeName;
      }
      if (other.DateTime.Length != 0) {
        DateTime = other.DateTime;
      }
      if (other.SamplingRate != 0D) {
        SamplingRate = other.SamplingRate;
      }
      if (other.SequenceNumber.Length != 0) {
        SequenceNumber = other.SequenceNumber;
      }
      if (other.InstrumentationKey.Length != 0) {
        InstrumentationKey = other.InstrumentationKey;
      }
      tags_.Add(other.tags_);
      switch (other.DataCase) {
        case DataOneofCase.Event:
          if (Event == null) {
            Event = new global::Library.Inputs.Contracts.Event();
          }
          Event.MergeFrom(other.Event);
          break;
        case DataOneofCase.Message:
          if (Message == null) {
            Message = new global::Library.Inputs.Contracts.Message();
          }
          Message.MergeFrom(other.Message);
          break;
        case DataOneofCase.Metric:
          if (Metric == null) {
            Metric = new global::Library.Inputs.Contracts.Metric();
          }
          Metric.MergeFrom(other.Metric);
          break;
        case DataOneofCase.Exception:
          if (Exception == null) {
            Exception = new global::Library.Inputs.Contracts.Exception();
          }
          Exception.MergeFrom(other.Exception);
          break;
        case DataOneofCase.Dependency:
          if (Dependency == null) {
            Dependency = new global::Library.Inputs.Contracts.Dependency();
          }
          Dependency.MergeFrom(other.Dependency);
          break;
        case DataOneofCase.Availability:
          if (Availability == null) {
            Availability = new global::Library.Inputs.Contracts.Availability();
          }
          Availability.MergeFrom(other.Availability);
          break;
        case DataOneofCase.PageView:
          if (PageView == null) {
            PageView = new global::Library.Inputs.Contracts.PageView();
          }
          PageView.MergeFrom(other.PageView);
          break;
        case DataOneofCase.Request:
          if (Request == null) {
            Request = new global::Library.Inputs.Contracts.Request();
          }
          Request.MergeFrom(other.Request);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Ver = input.ReadInt32();
            break;
          }
          case 18: {
            DataTypeName = input.ReadString();
            break;
          }
          case 26: {
            DateTime = input.ReadString();
            break;
          }
          case 33: {
            SamplingRate = input.ReadDouble();
            break;
          }
          case 42: {
            SequenceNumber = input.ReadString();
            break;
          }
          case 50: {
            InstrumentationKey = input.ReadString();
            break;
          }
          case 58: {
            tags_.AddEntriesFrom(input, _map_tags_codec);
            break;
          }
          case 66: {
            global::Library.Inputs.Contracts.Event subBuilder = new global::Library.Inputs.Contracts.Event();
            if (dataCase_ == DataOneofCase.Event) {
              subBuilder.MergeFrom(Event);
            }
            input.ReadMessage(subBuilder);
            Event = subBuilder;
            break;
          }
          case 74: {
            global::Library.Inputs.Contracts.Message subBuilder = new global::Library.Inputs.Contracts.Message();
            if (dataCase_ == DataOneofCase.Message) {
              subBuilder.MergeFrom(Message);
            }
            input.ReadMessage(subBuilder);
            Message = subBuilder;
            break;
          }
          case 82: {
            global::Library.Inputs.Contracts.Metric subBuilder = new global::Library.Inputs.Contracts.Metric();
            if (dataCase_ == DataOneofCase.Metric) {
              subBuilder.MergeFrom(Metric);
            }
            input.ReadMessage(subBuilder);
            Metric = subBuilder;
            break;
          }
          case 90: {
            global::Library.Inputs.Contracts.Exception subBuilder = new global::Library.Inputs.Contracts.Exception();
            if (dataCase_ == DataOneofCase.Exception) {
              subBuilder.MergeFrom(Exception);
            }
            input.ReadMessage(subBuilder);
            Exception = subBuilder;
            break;
          }
          case 98: {
            global::Library.Inputs.Contracts.Dependency subBuilder = new global::Library.Inputs.Contracts.Dependency();
            if (dataCase_ == DataOneofCase.Dependency) {
              subBuilder.MergeFrom(Dependency);
            }
            input.ReadMessage(subBuilder);
            Dependency = subBuilder;
            break;
          }
          case 106: {
            global::Library.Inputs.Contracts.Availability subBuilder = new global::Library.Inputs.Contracts.Availability();
            if (dataCase_ == DataOneofCase.Availability) {
              subBuilder.MergeFrom(Availability);
            }
            input.ReadMessage(subBuilder);
            Availability = subBuilder;
            break;
          }
          case 114: {
            global::Library.Inputs.Contracts.PageView subBuilder = new global::Library.Inputs.Contracts.PageView();
            if (dataCase_ == DataOneofCase.PageView) {
              subBuilder.MergeFrom(PageView);
            }
            input.ReadMessage(subBuilder);
            PageView = subBuilder;
            break;
          }
          case 122: {
            global::Library.Inputs.Contracts.Request subBuilder = new global::Library.Inputs.Contracts.Request();
            if (dataCase_ == DataOneofCase.Request) {
              subBuilder.MergeFrom(Request);
            }
            input.ReadMessage(subBuilder);
            Request = subBuilder;
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
